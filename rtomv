#!/usr/bin/env python2
#
# rtomv - freely move seeding rtorrent files without interrupting seeding
# 2013 code@tilton.co GPL


if __name__ == '__main__':
    import os
    import sys
    import errno

    from tools import slugify, owner
    from scgi import SCGIServerProxy
    from socket import error as socket_error


    class IllegalArgumentError(ValueError): pass

    # source directory is normalized for below lookup
    try:
        sources, dst = sys.argv[1:-1], os.path.realpath( sys.argv[-1] )
        if len(sources) < 1: raise IllegalArgumentError("missing file or dst operand")
        if (len(sources) > 1 and not os.path.isdir( dst )):
            raise IllegalArgumentError("target '{}' is not a directory".format(dst))
        owner = owner(dst)
        if owner != os.getenv('USER'):
            raise IllegalArgumentError("target '{}' is not writeable (owner: {})".format(dst, owner))
    except IndexError:
        exit("Usage: {} [FILE] <dst>".format(sys.argv[0]))
    except IllegalArgumentError, e:
        exit("{}".format(e))

    server = SCGIServerProxy('scgi:///tmp/rtorrent-rpc.socket')

    try:
        # map normalized directory names to hashes
        d = dict()
        for hash in server.download_list():
            d[ slugify( unicode( os.path.basename( server.d.get_base_path(hash) )) ) ] = hash
    except socket_error as serr:
        if serr.errno == errno.ECONNREFUSED:
            print "Is rtorrent running?"
            exit()
        raise serr


    from shutil import move as mv

    for src in sources:

        # normalized source directory exists in map (src is in rtorrent)
        src_slug = slugify( unicode( os.path.basename( os.path.normpath( src ) ) ) )
        if src_slug in d:   src_hash = d[src_slug]
        else:
            from pprint import pprint; pprint( d )
            exit("src_slug not found: {} - torrent removed from rtorrent?".format( src_slug ))

        # for an explanation of the following, see:
        # http://superuser.com/questions/410507/move-already-i-e-not-new-completed-files-in-rtorrent
        # rtorrent RPC generally:
        # http://code.google.com/p/pyroscope/wiki/RtXmlRpcReference

        try:
            server.d.set_directory(src_hash, dst)
            mv(src, dst)
            server.d.check_hash(src_hash)
            server.d.resume(src_hash)
            print "mv {} -> {}".format(src, dst)
        except Exception, e:
            exit( "{}".format( e ) )
