#!/usr/bin/env python2
# encoding=utf8
#
# rtomv - freely move seeding rtorrent files without interrupting seeding
# 2013 code@tilton.co GPL


import sys
reload(sys)
sys.setdefaultencoding('utf8')


if __name__ == '__main__':
    import os
    import sys
    import errno

    from tools import slugify, owner, mkdir_p
    from scgi import SCGIServerProxy
    from socket import error as socket_error


    class IllegalArgumentError(ValueError): pass

    # source directory is normalized for below lookup
    try:
        sources, dst = sys.argv[1:-1], os.path.realpath( sys.argv[-1] )
        if len(sources) < 1: raise IllegalArgumentError("missing file or dst operand")
        if len(sources) > 1:
            raise IllegalArgumentError("target '{}' is not a directory".format(dst))
        if not os.path.isdir( dst ):
            mkdir_p(dst)
        owner = owner(dst)
        if owner != os.getenv('USER'):
            raise IllegalArgumentError("target '{}' is not writeable (owner: {})".format(dst, owner))
    except IndexError:
        exit("Usage: {} [FILE] <dst>".format(sys.argv[0]))
    except IllegalArgumentError, e:
        exit("{}".format(e))

    server = SCGIServerProxy('scgi:///tmp/rtorrent-rpc.socket')
    #for m in server.system.listMethods():
    #    print m
    #sys.exit()

    try:
        # map normalized directory names to hashes
        d = dict()
        for hash in server.download_list():
            d[ slugify( unicode( os.path.basename( server.d.base_path(hash) )) ) ] = hash
    except socket_error as serr:
        if serr.errno == errno.ECONNREFUSED:
            print "warn: rtorrent not running"
        raise serr


    from shutil import move as mv

    class Move(object):
        RTORRENT=1
        STANDARD=2

    for src in sources:

        move = Move.RTORRENT

        # normalized source directory exists in map (src is in rtorrent)
        src_slug = slugify( unicode( os.path.basename( os.path.normpath( src ) ) ) )
        if src_slug in d:   src_hash = d[src_slug]
        else:
            move = Move.STANDARD
            #from pprint import pprint; pprint( d )
            print("warn: src not found {} - torrent removed from rtorrent?".format( src ))

        # for an explanation of the following, see:
        # http://superuser.com/questions/410507/move-already-i-e-not-new-completed-files-in-rtorrent
        # rtorrent RPC generally:
        # http://code.google.com/p/pyroscope/wiki/RtXmlRpcReference

        try:
            if move == Move.RTORRENT:
                server.d.directory_base.set(src_hash, dst)
            mv(src, dst)
            if move == Move.RTORRENT:
                server.d.check_hash(src_hash)
                server.d.resume(src_hash)
            print "mv {} -> {}".format(src, dst)
        except Exception, e:
            exit( "{}".format( e ) )
